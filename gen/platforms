

#if VK_USE_PLATFORM_XCB_KHR
@:include("linc_vulkan.h")
@:native("xcb_connection_t")
@:structAccess
extern class Xcb_connection_t {
    static inline function init():Xcb_connection_t {
        return untyped __cpp__('xcb_connection_t');
    }
}


@:include("linc_vulkan.h")
@:native("xcb_window_t")
@:structAccess
extern class Xcb_window_t {
    static inline function init():Xcb_window_t {
        return untyped __cpp__('xcb_window_t');
    }
}



@:include("linc_vulkan.h")
@:native("xcb_visualid_t")
@:structAccess
extern class Xcb_visualid_t {
    static inline function init():Xcb_visualid_t {
        return untyped __cpp__('xcb_visualid_t');
    }
}
#end

#if VK_USE_PLATFORM_WAYLAND_KHR
@:include("linc_vulkan.h")
@:native("wl_display")
@:structAccess
extern class Wl_display {
    static inline function init():Wl_display {
        return untyped __cpp__('Wl_display');
    }
}


@:include("linc_vulkan.h")
@:native("wl_surface")
@:structAccess
extern class Wl_surface {
    static inline function init():Wl_surface {
        return untyped __cpp__('Wl_surface');
    }
}

#end
#if VK_USE_PLATFORM_WIN32_KHR
// < type requires = "windows.h" name = "HINSTANCE" / > 
// < type requires = "windows.h" name = "HWND" / > 
// < type requires = "windows.h" name = "HMONITOR" / > 
// < type requires = "windows.h" name = "HANDLE" / > 
// < type requires = "windows.h" name = "SECURITY_ATTRIBUTES" / > 
// < type requires = "windows.h" name = "DWORD" / > 
// < type requires = "windows.h" name = "LPCWSTR" / >
@:include("linc_vulkan.h")
@:native("HINSTANCE")
@:structAccess
extern class HINSTANCE {
    static inline function init():HINSTANCE {
        return untyped __cpp__('HINSTANCE');
    }
}


@:include("linc_vulkan.h")
@:native("HWND")
@:structAccess
extern class HWND {
    static inline function init():HWND{
        return untyped __cpp__('HWND');
    }
}

@:include("linc_vulkan.h")
@:native("HMONITOR")
@:structAccess
extern class HMONITOR {
    static inline function init():HMONITOR {
        return untyped __cpp__('HMONITOR');
    }
}

@:include("linc_vulkan.h")
@:native("HANDLE")
@:structAccess
extern class HANDLE {
    static inline function init():HANDLE {
        return untyped __cpp__('HANDLE');
    }
}

@:include("linc_vulkan.h")
@:native("SECURITY_ATTRIBUTES")
@:structAccess
extern class SECURITY_ATTRIBUTES {
    static inline function init():SECURITY_ATTRIBUTES {
        return untyped __cpp__('SECURITY_ATTRIBUTES');
    }
}

@:include("linc_vulkan.h")
@:native("DWORD")
@:structAccess
extern class SECURITY_ATTRIBUTES {
    static inline function init():SECURITY_ATTRIBUTES {
        return untyped __cpp__('SECURITY_ATTRIBUTES');
    }
}

@:include("linc_vulkan.h")
@:native("LPCWSTR")
@:structAccess
extern class LPCWSTR {
    static inline function init():LPCWSTR {
        return untyped __cpp__('LPCWSTR');
    }
}
#end


#if VK_USE_PLATFORM_FUCHSIA
@:include("linc_vulkan.h")
@:native("zx_handle_t")
@:structAccess
extern class Zx_handle_t {
    static inline function init():Zx_handle_t {
        return untyped __cpp__('zx_handle_t');
    }
}
#end

#if VK_USE_PLATFORM_GGP
@:include("linc_vulkan.h")
@:native("GgpStreamDescriptor")
@:structAccess
extern class GgpStreamDescriptor {
    static inline function init():GgpStreamDescriptor {
        return untyped __cpp__('GgpStreamDescriptor');
    }
}

@:include("linc_vulkan.h")
@:native("GgpFrameToken")
@:structAccess
extern class GgpFrameToken {
    static inline function init():GgpFrameToken {
        return untyped __cpp__('GgpFrameToken');
    }
}
#end

#if VK_USE_PLATFORM_XLIB_KHR
@:include("linc_vulkan.h")
@:native("Display")
@:structAccess
extern class Display {
    static inline function init():Display {
        return untyped __cpp__('Display');
    }
}

@:include("linc_vulkan.h")
@:native("VisualID")
@:structAccess
extern class VisualID {
    static inline function init():VisualID {
        return untyped __cpp__('VisualID');
    }
}

@:include("linc_vulkan.h")
@:native("Window")
@:structAccess
extern class Window {
    static inline function init():Window {
        return untyped __cpp__('Window');
    }
}
#end


#if VK_USE_PLATFORM_XLIB_XRANDR_EXT
@:include("linc_vulkan.h")
@:native("RROutput")
@:structAccess
extern class RROutput {
    static inline function init():RROutput {
        return untyped __cpp__('RROutput');
    }
}
#end


#if VK_USE_PLATFORM_ANDROID_KHR
@:include("linc_vulkan.h")
@:native("ANativeWindow")
@:structAccess
extern class ANativeWindow {
    static inline function init():ANativeWindow {
        return untyped __cpp__('ANativeWindow');
    }
}

@:include("linc_vulkan.h")
@:native("AHardwareBuffer")
@:structAccess
extern class AHardwareBuffer {
    static inline function init():AHardwareBuffer {
        return untyped __cpp__('AHardwareBuffer');
    }
}
#end


#if VK_USE_PLATFORM_METAL_EXT
@:include("linc_vulkan.h")
@:native("CAMetalLayer")
extern class CAMetalLayer {
    static inline function init():CAMetalLayer {
        return untyped __cpp__('CAMetalLayer');
    }
}
#end